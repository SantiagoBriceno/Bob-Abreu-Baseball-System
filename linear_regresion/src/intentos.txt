// const xs = tf.tensor2d(
    //   x,
    //   [xLength, 1]
    // )

    // const ys = tf.tensor2d(
    //   y,
    //   [yLength, 1]
    // )

    // const model = tf.sequential()
    // model.add(tf.layers.dense({ units: 1, inputShape: [1] }))
    // model.compile({ loss: 'meanSquaredError', optimizer: 'adam' })

    // await model.fit(xs, ys, {
    //   epochs: 50,
    //   callbacks: {
    //     onEpochEnd: async (epoch, logs) => {
    //       console.log(`Epoch ${epoch}: loss = ${logs.loss}`)
    //     }
    //   }
    // })

    // const prediction = model.predict(tf.tensor2d([472], [1, 1]))
    // console.log(`Prediction for x = 472: ${prediction.dataSync()[0]}`)


export const getRunningPrediction = async (req, res) => {
  // DATOS DE ENTRENAMIENTO DE LA REGRESION LINEAL
  const x = [
    0,
    14,
    31,
    45,
    61,
    75,
    92,
    106,
    123,
    137,
    153,
    167,
    184,
    198,
    214,
    228,
    245,
    259,
    276,
    288,
    304,
    318,
    335,
    349,
    365,
    379,
    396,
    410,
    426,
    440,
    457,
    471,
    0,
    14,
    31,
    45,
    61,
    75,
    92,
    106,
    123,
    137,
    153,
    167,
    184,
    198,
    214,
    228,
    245,
    259,
    276,
    288,
    304,
    318,
    335,
    349,
    365,
    379,
    396,
    410,
    426,
    440,
    457,
    471,
    0,
    14,
    28,
    44,
    58,
    75,
    89,
    106,
    120,
    136,
    150,
    167,
    181,
    197,
    211,
    228,
    242,
    259,
    271,
    287,
    301,
    318,
    332,
    348,
    362,
    379,
    393,
    409,
    423,
    440,
    454,
    0,
    7,
    14,
    21,
    28,
    35,
    42,
    49,
    56,
    63,
    70,
    77,
    84,
    91,
    98,
    105,
    112,
    119,
    0,
    10,
    20,
    30,
    40,
    50,
    60,
    70,
    80,
    90,
    100,
    110,
    120,
    130,
    140,
    150,
    160,
    170,
    180,
    190
  ]
  const y = [
    8,
    7.9,
    7.8,
    7.9,
    8.1,
    8.3,
    7.9,
    7.7,
    7.7,
    7.8,
    7.5,
    7.3,
    7.2,
    7.1,
    7.3,
    7.2,
    7.3,
    7.4,
    7.5,
    7.8,
    7.7,
    7.6,
    7.5,
    7.4,
    7.3,
    7.2,
    7.1,
    6.8,
    6.7,
    6.9,
    6.9,
    6.8,
    8.3,
    7.9,
    8.3,
    8.2,
    7.8,
    7.9,
    7.9,
    7.3,
    8.4,
    8,
    8.1,
    8.2,
    7.9,
    8.1,
    7.9,
    7.9,
    7.9,
    7.8,
    7.9,
    7.9,
    8,
    7.9,
    7.8,
    7.8,
    7.9,
    8,
    7.9,
    7.8,
    8,
    7.5,
    7.6,
    7.8,
    7.9,
    8.2,
    7.9,
    8.1,
    7.9,
    7.9,
    7.8,
    8.4,
    8,
    8.1,
    8.2,
    7.9,
    8.1,
    7.9,
    7.9,
    7.9,
    7.8,
    7.9,
    7.9,
    8,
    7.9,
    7.8,
    7.8,
    7.9,
    8,
    7.6,
    7.7,
    7.6,
    7.5,
    7.4,
    7.3,
    7.9,
    7.9,
    7.9,
    7.8,
    7.8,
    7.9,
    7.9,
    7.9,
    7.6,
    7.7,
    7.8,
    7.8,
    7.9,
    7.9,
    7.9,
    7.6,
    7.7,
    7.6,
    7.9,
    7.8,
    7.6,
    7.6,
    7.7,
    7.7,
    7.5,
    7.5,
    7.3,
    7.3,
    7.2,
    7.2,
    7.1,
    7.3,
    7.3,
    7.2,
    7.2,
    7.3,
    7.1,
    7
  ]

  const regressionParams = linearRegression(x, y)

  const estimatedYforX = estimateY(600, regressionParams)
  console.log(estimatedYforX)

  const futureX = [25, 30, 35, 40]
  const estimatedFutureY = futureX.map(x => estimateY(x, regressionParams))
  console.log(estimatedFutureY)
}